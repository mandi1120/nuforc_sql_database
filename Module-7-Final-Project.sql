/* 
PURPOSE: DATABASES FOR ANALYTICS, MODULE 7 - FINAL PROJECT  
CREATED: AMANDA HANWAY, 10/2/22 
REQUIREMENTS:
  -CREATE A DATABASE 
	-YOUR DATABASE MUST INCLUDE AT LEAST 3 TABLES. 
	-ONE TABLE MUST HAVE AT LEAST 1000 ROWS, AND TWO OTHER TABLES MUST HAVE AT LEAST 100 ROWS. 
	-THERE MUST BE AT LEAST ONE DATE DATA TYPE, ONE NUMERIC DATA TYPE, AND ONE STRING DATA TYPE.
  -VERIFY THE DATA
  -RECORD A VIDEO (15-20 MIN) OF YOUR SCREEN WALKING US THROUGH WHAT YOU HAVE AND HOW YOU GOT THERE. 
    IN YOUR VIDEO MAKE SURE TO SHOW THE FOLLOWING:
	-THE INITIAL SOURCE AND FORMAT OF YOUR DATA.
	-SOME OF THE OBSTACLES YOU OVERCAME TO TRANSFORM THE DATA.
	-YOUR TABLE STRUCTURE INCLUDING DATA TYPES
	-SELECT * FROM YOUR TABLES
	-SOME INTERESTING QUERIES FROM YOUR TABLES.  MAKE SURE TO INCLUDE:
		-AT LEAST ONE JOIN
		-AT LEAST ONE QUERY WHERE YOU AGGREGATE DATA
DATA SOURCES:
 -Ufo data:  https://www.kaggle.com/datasets/camnugent/ufo-sightings-around-the-world  
 -City data: https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv  
 -Date data: https://data.world/cegomez22/dimdate 		
*/

---------STEP 1: CREATE NUFORC DATABASE---------


---------STEP 2: INSERT RAW DATA FILE---------
--DROP TABLE UFO_SIGHTING_DATA;
CREATE TABLE UFO_SIGHTING_DATA (
	DATE_TIME TIMESTAMP(0),
	CITY VARCHAR(255),
	STATE_PROVINCE VARCHAR (255),
	COUNTRY VARCHAR (255),
	UFO_SHAPE VARCHAR(10),
	LENGTH_OF_ENCOUNTER_SECONDS VARCHAR (255),
	DESCRIBED_DURATION_OF_ENCOUNTER VARCHAR(50),
	DESCRIPTION TEXT,
	DATE_DOCUMENTED DATE,
	LATITUDE VARCHAR (255),
	LONGITUDE VARCHAR (255)
);					
COPY UFO_SIGHTING_DATA FROM 'C:\UFO_SIGHTING_DATA.CSV' CSV HEADER DELIMITER ','; 


---------STEP 3: CLEAN THE DATA---------
--DROP TABLE UFO_SIGHTINGS;
CREATE TABLE UFO_SIGHTINGS (
	DATE_TIME_KEY INT,
	DATE_TIME TIMESTAMP WITH TIME ZONE, --INCLUDE TIMEZONE ON DATE_TIME FIELD
	CITY VARCHAR(255),
	STATE_PROVINCE VARCHAR (255),
	COUNTRY VARCHAR (255),
	UFO_SHAPE VARCHAR(10),
	LENGTH_OF_ENCOUNTER_SECONDS DECIMAL(18,1),
	DESCRIBED_DURATION_OF_ENCOUNTER VARCHAR(50),
	DESCRIPTION TEXT,
	DATE_DOCUMENTED_KEY INT,
	DATE_DOCUMENTED DATE,
	LATITUDE DECIMAL(10,6),
	LONGITUDE DECIMAL(10,6)
);	
INSERT INTO UFO_SIGHTINGS 
SELECT 
	CAST(EXTRACT(MONTH FROM DATE_TIME)::CHAR(2) || EXTRACT(DAY FROM DATE_TIME)::CHAR(2) || RIGHT(EXTRACT(YEAR FROM DATE_TIME)::CHAR(4),2) AS INT) AS DATE_TIME_KEY
	,DATE_TIME
	,CITY
	,STATE_PROVINCE
	,COUNTRY
	,UFO_SHAPE
	,REGEXP_REPLACE(LENGTH_OF_ENCOUNTER_SECONDS,'[^-0-9.]+', '', 'g')::DECIMAL(18,1) AS LENGTH_OF_ENCOUNTER_SECONDS
	,DESCRIBED_DURATION_OF_ENCOUNTER
	,DESCRIPTION
	,CAST(EXTRACT(MONTH FROM DATE_DOCUMENTED)::CHAR(2) || EXTRACT(DAY FROM DATE_DOCUMENTED)::CHAR(2) || EXTRACT(YEAR FROM DATE_DOCUMENTED)::CHAR(2) AS INT) AS DATE_DOCUMENTED_KEY	
	,DATE_DOCUMENTED
	,REGEXP_REPLACE(LATITUDE,'[^-0-9.]+', '', 'g')::DECIMAL(18,1) AS LATITUDE
	,REGEXP_REPLACE(LONGITUDE,'[^-0-9.]+', '', 'g')::DECIMAL(18,1) AS LONGITUDE
FROM UFO_SIGHTING_DATA
; 	
--ADD PRIMARY KEY
ALTER TABLE UFO_SIGHTINGS ADD COLUMN UFO_SIGHTING_ID SERIAL PRIMARY KEY;


---------STEP 4: CREATE A CALENDAR TABLE---------
--DROP TABLE DIM_DATE;
CREATE TABLE DIM_DATE (
	DATE_KEY INTEGER PRIMARY KEY,
	WORD_DATE DATE,
	DATE DATE,
	YEAR INTEGER,
	QUARTER INTEGER,
	MONTH INTEGER,
	DAY_OF_MONTH INTEGER,
	WEEK INTEGER,
	DAY_OF_WEEK VARCHAR(50),
	WEEKDAY INTEGER,
	MONTH_AND_YEAR VARCHAR(50),
	HOLIDAY VARCHAR(50),
	TIMEZONE_ID VARCHAR(50),
	TIMEZONE VARCHAR(50),
	TIMEZONE_OFFSET INTEGER
);	
COPY DIM_DATE (DATE_KEY,WORD_DATE,DATE,YEAR,QUARTER,MONTH,DAY_OF_MONTH,WEEK,DAY_OF_WEEK,WEEKDAY,MONTH_AND_YEAR,HOLIDAY,TIMEZONE_ID,TIMEZONE,TIMEZONE_OFFSET)
FROM 'C:\CALENDAR.CSV'	
CSV HEADER DELIMITER ',' 
; 


---------STEP 5: CREATE A CITIES TABLE---------
--DROP TABLE DIM_CITIES;
CREATE TABLE DIM_CITIES (
	CITY  VARCHAR(35),
	STATE VARCHAR(35),
	POPULATION INT,
	LAT  DECIMAL(10,6),
	LONG  DECIMAL(10,6)
);	
COPY DIM_CITIES (CITY, STATE, POPULATION, LAT, LONG)
FROM 'C:\US-CITIES-TOP-1K.CSV'	
CSV HEADER DELIMITER ',' 
; 
--ADD PRIMARY KEY COLUMN
ALTER TABLE DIM_CITIES ADD COLUMN CITY_ID SERIAL PRIMARY KEY;
--ADD STATE CODE COLUMN
ALTER TABLE DIM_CITIES ADD COLUMN STATE_CODE CHAR(2);
UPDATE DIM_CITIES DC
SET STATE_CODE = S.STATE_CODE
FROM (
	SELECT DISTINCT UPPER(STATE) AS STATE
		, CASE WHEN UPPER(STATE) = 'ALABAMA' THEN 'AL' 
				WHEN UPPER(STATE) = 'ALASKA' THEN 'AK'
				WHEN UPPER(STATE) = 'ARIZONA' THEN 'AZ'
				WHEN UPPER(STATE) = 'ARKANSAS' THEN 'AR'
				WHEN UPPER(STATE) = 'CALIFORNIA' THEN 'CA'
				WHEN UPPER(STATE) = 'COLORADO' THEN 'CO'
				WHEN UPPER(STATE) = 'CONNECTICUT' THEN 'CT'
				WHEN UPPER(STATE) = 'DELAWARE' THEN 'DE'
				WHEN UPPER(STATE) = 'DISTRICT OF COLUMBIA' THEN 'DC'
				WHEN UPPER(STATE) = 'FLORIDA' THEN 'FL'
				WHEN UPPER(STATE) = 'GEORGIA' THEN 'GA'
				WHEN UPPER(STATE) = 'HAWAII' THEN 'HI'
				WHEN UPPER(STATE) = 'IDAHO' THEN 'ID'
				WHEN UPPER(STATE) = 'ILLINOIS' THEN 'IL'
				WHEN UPPER(STATE) = 'INDIANA' THEN 'IN'
				WHEN UPPER(STATE) = 'IOWA' THEN 'IA'
				WHEN UPPER(STATE) = 'KANSAS' THEN 'KS'
				WHEN UPPER(STATE) = 'KENTUCKY' THEN 'KY'
				WHEN UPPER(STATE) = 'LOUISIANA' THEN 'LA'
				WHEN UPPER(STATE) = 'MAINE' THEN 'MA'
				WHEN UPPER(STATE) = 'MARYLAND' THEN 'MD'
				WHEN UPPER(STATE) = 'MASSACHUSETTS' THEN 'ME'
				WHEN UPPER(STATE) = 'MICHIGAN' THEN 'MI'
				WHEN UPPER(STATE) = 'MINNESOTA' THEN 'MN'
				WHEN UPPER(STATE) = 'MISSISSIPPI' THEN 'MS'
				WHEN UPPER(STATE) = 'MISSOURI' THEN 'MO'
				WHEN UPPER(STATE) = 'MONTANA' THEN 'MT'
				WHEN UPPER(STATE) = 'NEBRASKA' THEN 'NE'
				WHEN UPPER(STATE) = 'NEVADA' THEN 'NV'
				WHEN UPPER(STATE) = 'NEW HAMPSHIRE' THEN 'NH'
				WHEN UPPER(STATE) = 'NEW JERSEY' THEN 'NJ'
				WHEN UPPER(STATE) = 'NEW MEXICO' THEN 'NM'
				WHEN UPPER(STATE) = 'NEW YORK' THEN 'NY'
				WHEN UPPER(STATE) = 'NORTH CAROLINA' THEN 'NC'
				WHEN UPPER(STATE) = 'NORTH DAKOTA' THEN 'ND'
				WHEN UPPER(STATE) = 'OHIO' THEN 'OH'
				WHEN UPPER(STATE) = 'OKLAHOMA' THEN 'OK'
				WHEN UPPER(STATE) = 'OREGON' THEN 'OR'
				WHEN UPPER(STATE) = 'PENNSYLVANIA' THEN 'PA'
				WHEN UPPER(STATE) = 'RHODE ISLAND' THEN 'RI'
				WHEN UPPER(STATE) = 'SOUTH CAROLINA' THEN 'SC'
				WHEN UPPER(STATE) = 'SOUTH DAKOTA' THEN 'SD'
				WHEN UPPER(STATE) = 'TENNESSEE' THEN 'TN'
				WHEN UPPER(STATE) = 'TEXAS' THEN 'TX'
				WHEN UPPER(STATE) = 'UTAH' THEN 'UT'
				WHEN UPPER(STATE) = 'VERMONT' THEN 'VT'
				WHEN UPPER(STATE) = 'VIRGINIA' THEN 'VA'
				WHEN UPPER(STATE) = 'WASHINGTON' THEN 'WA'
				WHEN UPPER(STATE) = 'WEST VIRGINIA' THEN 'WV'
				WHEN UPPER(STATE) = 'WISCONSIN' THEN 'WI'
				WHEN UPPER(STATE) = 'WYOMING' THEN 'WY'
			END AS STATE_CODE
	FROM DIM_CITIES
)S
WHERE UPPER(DC.STATE) = UPPER(S.STATE)
;


---------STEP 6: CREATE A VIEW TO IDENTIFY SIGHTINGS IN THE US AFTER YEAR 2000---------
--DROP VIEW US_SIGHTINGS_AFTER_2000;
CREATE VIEW US_SIGHTINGS_AFTER_2000 AS (
	SELECT A.* 
	FROM UFO_SIGHTINGS A	
	WHERE UPPER(A.COUNTRY) = 'US'
	AND A.DATE_TIME >= DATE '2000-01-01'
)
;


---------STEP 7: CREATE A TEMP TABLE TO JOIN LAT/LONG TO UFO DATA---------
/* THE UFO SIGHTING DATA DOES NOT HAVE STANDARD CITY & STATE AS IT WAS A TEXT ENTRY FIELD
JOIN SIGHTINGS TO THE CITY TABLE WHERE A CITY CAN BE IDENTIFIED WITHIN 5 MILES BY LAT/LONG
SO DATA CAN BE REPORTED BY STANDARDIZED CITY AND STATE */
--CREATE EXTENSION CUBE;
--CREATE EXTENSION EARTHDISTANCE;
--DROP TABLE US_SIGHTINGS_BY_CITY;
CREATE TEMP TABLE US_SIGHTINGS_BY_CITY AS (
	SELECT
		UFO_SIGHTING_ID
		,DATE_TIME_KEY
		,DATE_TIME	
		,COUNTRY	
		,UFO_SHAPE	
		,LENGTH_OF_ENCOUNTER_SECONDS	
		,DESCRIBED_DURATION_OF_ENCOUNTER	
		,DESCRIPTION	
		,DATE_DOCUMENTED	
		,STANDARDIZED_CITY	
		,STATE
		,STATE_CODE
		,POPULATION	
		,LAT	
		,LONG
	FROM (
		SELECT *, ROW_NUMBER() OVER(PARTITION BY UFO_SIGHTING_ID ORDER BY DISTANCE_IN_MILES ASC) AS DISTANCE_SEQ
		FROM (
			SELECT
				A.UFO_SIGHTING_ID
				,A.DATE_TIME_KEY
				,A.DATE_TIME	
				,A.CITY	
				,A.STATE_PROVINCE	
				,A.COUNTRY	
				,A.UFO_SHAPE	
				,A.LENGTH_OF_ENCOUNTER_SECONDS	
				,A.DESCRIBED_DURATION_OF_ENCOUNTER	
				,A.DESCRIPTION	
				,A.DATE_DOCUMENTED	
				,A.LATITUDE	
				,A.LONGITUDE
				,C.CITY	AS STANDARDIZED_CITY
				,C.STATE  
				,C.STATE_CODE
				,C.POPULATION	
				,C.LAT	
				,C.LONG
				,POINT(A.LONGITUDE, A.LATITUDE) <@> POINT(C.LONG, C.LAT) AS DISTANCE_IN_MILES
			FROM US_SIGHTINGS_AFTER_2000 A	
			CROSS JOIN DIM_CITIES C
			WHERE UPPER(A.STATE_PROVINCE) = UPPER(C.STATE_CODE)
				AND POINT(A.LONGITUDE, A.LATITUDE) <@> POINT(C.LONG, C.LAT) <= 5
		)D
	)E
	WHERE DISTANCE_SEQ = 1
)
;	


--------------------------------------------------------------------
--QUERIES
--------------------------------------------------------------------


-------VIEW TABLES-------
SELECT * FROM UFO_SIGHTING_DATA; --RAW DATA IMPORTED
SELECT * FROM UFO_SIGHTINGS; --CLEANED DATA
SELECT * FROM DIM_DATE; --CALENDAR DATA
SELECT * FROM DIM_CITIES; --US CITIES DATA
SELECT * FROM US_SIGHTINGS_AFTER_2000; --VIEW WITH US SIGHTINGS THAT TOOK PLACE AFTER 1/1/2000
SELECT * FROM US_SIGHTINGS_BY_CITY; --TEMP TABLE WITH US SIGHTINGS THAT TOOK PLACE AFTER 1/1/2000, WITH STANDARDIZED CITY NAMES


-------VIEW SIZE OF EACH TABLE-------
SELECT 'DIM_CITIES' AS NAME_OF_TABLE, COUNT(*) AS COUNT_OF_ROWS
FROM DIM_CITIES
GROUP BY 1
UNION
SELECT 'DIM_DATE' AS NAME_OF_TABLE, COUNT(*) AS COUNT_OF_ROWS
FROM DIM_DATE
GROUP BY 1
UNION
SELECT 'UFO_SIGHTINGS' AS NAME_OF_TABLE, COUNT(*) AS COUNT_OF_ROWS
FROM UFO_SIGHTINGS
GROUP BY 1
;


-------QUERY TO AGGREGATE REPORTED SIGHTINGS BY DAY OF WEEK AND SHAPE--------- 
SELECT D.WEEKDAY
	, D.DAY_OF_WEEK
	, COALESCE(UPPER(C.UFO_SHAPE), 'UNKNOWN') AS UFO_SHAPE
	, COUNT(DISTINCT UFO_SIGHTING_ID) AS REPORTED_SIGHTINGS
	
FROM US_SIGHTINGS_BY_CITY C

LEFT JOIN DIM_DATE D
ON C.DATE_TIME_KEY = D.DATE_KEY

WHERE 1=1
GROUP BY 1,2,3
ORDER BY 1,3
;


-------QUERY TO AGGREGATE REPORTED SIGHTINGS BY CITY POPULATION SIZE--------- 
SELECT 
	CASE WHEN POPULATION >= 1000000 THEN '1. 1 MILLION AND ABOVE'
		 WHEN POPULATION >= 500000  THEN '2. 500K TO 999K'
		 WHEN POPULATION >= 100000  THEN '3. 100K TO 499K'			
		 WHEN POPULATION >= 50000   THEN '4. 50K TO 99K'
		 WHEN POPULATION  < 50000   THEN '5. BELOW 50K'
		END AS POPULATION_GROUP
	, COUNT(DISTINCT UFO_SIGHTING_ID) AS REPORTED_SIGHTINGS	
FROM US_SIGHTINGS_BY_CITY C
WHERE 1=1
GROUP BY 1
ORDER BY 1
;


